// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: center.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifyKeysClient is the client API for NotifyKeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyKeysClient interface {
	SendKeys(ctx context.Context, in *AvailableKeys, opts ...grpc.CallOption) (*KeysResponse, error)
}

type notifyKeysClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyKeysClient(cc grpc.ClientConnInterface) NotifyKeysClient {
	return &notifyKeysClient{cc}
}

func (c *notifyKeysClient) SendKeys(ctx context.Context, in *AvailableKeys, opts ...grpc.CallOption) (*KeysResponse, error) {
	out := new(KeysResponse)
	err := c.cc.Invoke(ctx, "/protofiles.NotifyKeys/SendKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyKeysServer is the server API for NotifyKeys service.
// All implementations must embed UnimplementedNotifyKeysServer
// for forward compatibility
type NotifyKeysServer interface {
	SendKeys(context.Context, *AvailableKeys) (*KeysResponse, error)
	mustEmbedUnimplementedNotifyKeysServer()
}

// UnimplementedNotifyKeysServer must be embedded to have forward compatible implementations.
type UnimplementedNotifyKeysServer struct {
}

func (UnimplementedNotifyKeysServer) SendKeys(context.Context, *AvailableKeys) (*KeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeys not implemented")
}
func (UnimplementedNotifyKeysServer) mustEmbedUnimplementedNotifyKeysServer() {}

// UnsafeNotifyKeysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyKeysServer will
// result in compilation errors.
type UnsafeNotifyKeysServer interface {
	mustEmbedUnimplementedNotifyKeysServer()
}

func RegisterNotifyKeysServer(s grpc.ServiceRegistrar, srv NotifyKeysServer) {
	s.RegisterService(&NotifyKeys_ServiceDesc, srv)
}

func _NotifyKeys_SendKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyKeysServer).SendKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.NotifyKeys/SendKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyKeysServer).SendKeys(ctx, req.(*AvailableKeys))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifyKeys_ServiceDesc is the grpc.ServiceDesc for NotifyKeys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifyKeys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.NotifyKeys",
	HandlerType: (*NotifyKeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendKeys",
			Handler:    _NotifyKeys_SendKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "center.proto",
}
