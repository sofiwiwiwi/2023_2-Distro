// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protofiles

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifyKeysClient is the client API for NotifyKeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifyKeysClient interface {
	SendKeys(ctx context.Context, in *AvailableKeysReq, opts ...grpc.CallOption) (*Empty, error)
	NotifyContinue(ctx context.Context, in *ContinueServiceReq, opts ...grpc.CallOption) (*ContinueServiceReq, error)
	UsersNotAdmittedNotify(ctx context.Context, in *UsersNotAdmittedReq, opts ...grpc.CallOption) (*Empty, error)
}

type notifyKeysClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyKeysClient(cc grpc.ClientConnInterface) NotifyKeysClient {
	return &notifyKeysClient{cc}
}

func (c *notifyKeysClient) SendKeys(ctx context.Context, in *AvailableKeysReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protofiles.NotifyKeys/SendKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyKeysClient) NotifyContinue(ctx context.Context, in *ContinueServiceReq, opts ...grpc.CallOption) (*ContinueServiceReq, error) {
	out := new(ContinueServiceReq)
	err := c.cc.Invoke(ctx, "/protofiles.NotifyKeys/NotifyContinue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyKeysClient) UsersNotAdmittedNotify(ctx context.Context, in *UsersNotAdmittedReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/protofiles.NotifyKeys/UsersNotAdmittedNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyKeysServer is the server API for NotifyKeys service.
// All implementations must embed UnimplementedNotifyKeysServer
// for forward compatibility
type NotifyKeysServer interface {
	SendKeys(context.Context, *AvailableKeysReq) (*Empty, error)
	NotifyContinue(context.Context, *ContinueServiceReq) (*ContinueServiceReq, error)
	UsersNotAdmittedNotify(context.Context, *UsersNotAdmittedReq) (*Empty, error)
	mustEmbedUnimplementedNotifyKeysServer()
}

// UnimplementedNotifyKeysServer must be embedded to have forward compatible implementations.
type UnimplementedNotifyKeysServer struct {
}

func (UnimplementedNotifyKeysServer) SendKeys(context.Context, *AvailableKeysReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeys not implemented")
}
func (UnimplementedNotifyKeysServer) NotifyContinue(context.Context, *ContinueServiceReq) (*ContinueServiceReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyContinue not implemented")
}
func (UnimplementedNotifyKeysServer) UsersNotAdmittedNotify(context.Context, *UsersNotAdmittedReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersNotAdmittedNotify not implemented")
}
func (UnimplementedNotifyKeysServer) mustEmbedUnimplementedNotifyKeysServer() {}

// UnsafeNotifyKeysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifyKeysServer will
// result in compilation errors.
type UnsafeNotifyKeysServer interface {
	mustEmbedUnimplementedNotifyKeysServer()
}

func RegisterNotifyKeysServer(s grpc.ServiceRegistrar, srv NotifyKeysServer) {
	s.RegisterService(&NotifyKeys_ServiceDesc, srv)
}

func _NotifyKeys_SendKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyKeysServer).SendKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.NotifyKeys/SendKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyKeysServer).SendKeys(ctx, req.(*AvailableKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyKeys_NotifyContinue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueServiceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyKeysServer).NotifyContinue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.NotifyKeys/NotifyContinue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyKeysServer).NotifyContinue(ctx, req.(*ContinueServiceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyKeys_UsersNotAdmittedNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersNotAdmittedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyKeysServer).UsersNotAdmittedNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.NotifyKeys/UsersNotAdmittedNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyKeysServer).UsersNotAdmittedNotify(ctx, req.(*UsersNotAdmittedReq))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifyKeys_ServiceDesc is the grpc.ServiceDesc for NotifyKeys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifyKeys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.NotifyKeys",
	HandlerType: (*NotifyKeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendKeys",
			Handler:    _NotifyKeys_SendKeys_Handler,
		},
		{
			MethodName: "NotifyContinue",
			Handler:    _NotifyKeys_NotifyContinue_Handler,
		},
		{
			MethodName: "UsersNotAdmittedNotify",
			Handler:    _NotifyKeys_UsersNotAdmittedNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/center.proto",
}

// FinalNotificationClient is the client API for FinalNotification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinalNotificationClient interface {
	NotifyRegional(ctx context.Context, in *FinalNotifyRequest, opts ...grpc.CallOption) (*FinalNotifyResponse, error)
}

type finalNotificationClient struct {
	cc grpc.ClientConnInterface
}

func NewFinalNotificationClient(cc grpc.ClientConnInterface) FinalNotificationClient {
	return &finalNotificationClient{cc}
}

func (c *finalNotificationClient) NotifyRegional(ctx context.Context, in *FinalNotifyRequest, opts ...grpc.CallOption) (*FinalNotifyResponse, error) {
	out := new(FinalNotifyResponse)
	err := c.cc.Invoke(ctx, "/protofiles.FinalNotification/NotifyRegional", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinalNotificationServer is the server API for FinalNotification service.
// All implementations must embed UnimplementedFinalNotificationServer
// for forward compatibility
type FinalNotificationServer interface {
	NotifyRegional(context.Context, *FinalNotifyRequest) (*FinalNotifyResponse, error)
	mustEmbedUnimplementedFinalNotificationServer()
}

// UnimplementedFinalNotificationServer must be embedded to have forward compatible implementations.
type UnimplementedFinalNotificationServer struct {
}

func (UnimplementedFinalNotificationServer) NotifyRegional(context.Context, *FinalNotifyRequest) (*FinalNotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRegional not implemented")
}
func (UnimplementedFinalNotificationServer) mustEmbedUnimplementedFinalNotificationServer() {}

// UnsafeFinalNotificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinalNotificationServer will
// result in compilation errors.
type UnsafeFinalNotificationServer interface {
	mustEmbedUnimplementedFinalNotificationServer()
}

func RegisterFinalNotificationServer(s grpc.ServiceRegistrar, srv FinalNotificationServer) {
	s.RegisterService(&FinalNotification_ServiceDesc, srv)
}

func _FinalNotification_NotifyRegional_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinalNotificationServer).NotifyRegional(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protofiles.FinalNotification/NotifyRegional",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinalNotificationServer).NotifyRegional(ctx, req.(*FinalNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinalNotification_ServiceDesc is the grpc.ServiceDesc for FinalNotification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinalNotification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protofiles.FinalNotification",
	HandlerType: (*FinalNotificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyRegional",
			Handler:    _FinalNotification_NotifyRegional_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/center.proto",
}
